---------------------------------------PROCESS_EVENT---------------------------------------------------------

-- this code will handle events type, timeonevent, mentions
DELIMITER // 
CREATE PROCEDURE parse_event()
BEGIN
    -- Declare variables that will hold certain values from the datafeed
    DECLARE event_type INT; -- Will need to parse evcatcodes for this
    DECLARE account_id INT;
    DECLARE event_id_hold INT;
    DECLARE event_nature INT;
    DECLARE event_time VARCHAR(45);
    DECLARE event_time_DT DATETIME;
    DECLARE evcatcode_hold VARCHAR(45);
    DECLARE mentions_hold VARCHAR(400);
    DECLARE content_hold VARCHAR(400);
    DECLARE data_feed_max INT;

    DECLARE index_val INT;
    SET index_val = 1;

    DECLARE evcat1 INT;
    DECLARE evcat2 INT;
    

    -- this will store the largest data_feed_id so we can go through each row in the table
    SELECT MAX(data_feed_id) INTO data_feed_max
    FROM SM_data_feed;

    
    -- this code will run until it has parsed through the data feed
    WHILE index_val < (data_feed_max+1) DO
        -- set the values of variables
        SELECT smuid, event_id, evcatcodes, timeonevent, hashtags, content
        INTO account_id, event_id_hold, evcatcode_hold, event_time, mentions_hold, content_hold
        FROM SM_data_feed where data_feed_id = index_val;

    -- just assume the delimiter is a comma for simplicity
    -- if we were to check delimiters we can have casses to change a delimiter variable
    -- based on the delimiter that is read from the string

    -- The following code will take the value from the string and convert it into an unsigned integer
    -- we will assume that the string only has one value on either side of the delimiter
    -- the CAST will ignore all the spaces in the string if there are spaces
    SET evcat1 = CAST(SUBSTRING_INDEX(evcatcode_hold, ',', 1) AS UNSIGNED);
    SET evcat2 = CAST(SUBSTRING_INDEX(evcatcode_hold, ',', -1) AS UNSIGNED);

    -- the following will check if value is within range (0-8) & (0-7)
    IF evcat1 > 8 THEN 
        SET evcat1 = 0;
    END IF; THEN
    IF evcat2 > 7
        SET evcat2 = 0;
    END IF;

    -- format the timeonevent with default or proper format
    IF event_time IS NULL THEN
            SET event_time_DT = '0000-00-00 00:00:00';
        ELSE
            SET event_time_DT = STR_TO_DATE(event_time, '%Y-%m-%d %H:%i:%s');
    END IF;


    CASE 
        -- first case if unknown event or event in social_event
        WHEN evcat1 = 0 || evcat1 = 4 THEN 
            CALL UpsertSocialEvent(event_id, evcat1, evcat2, event_time_DT, content_hold);
        
        -- second case for device_event_log
        WHEN evcat1 > 0 && evcat1 < 4 THEN 
            CALL UpsertDeviceLog(event_id, evcat1, event_time_DT);

        -- third case for social_action: comment, like, repost, mention
        ELSE
            CALL UpsertActions(event_id, evcat1, event_time_DT, content_hold);

    END --end CASE

    SET index_val = index_val + 1; -- incrament so that it will parse through all the feed
    END WHILE;
    

END //
DELIMITER ;


-- Code to update or insert data int social_event table
DELIMITER //
CREATE PROCEDURE UpsertSocialEvent(IN event_id INT, IN evcat1 INT, IN evcat2 INT, IN dateTime1 DATETIME, IN content1 VARCHAR(400))
BEGIN
    DECLARE entry_exist INT;

    --check if the entry exists
    SELECT COUNT(*)
    INTO entry_exist
    FROM social_event
    WHERE social_event_id = event_id;

    -- if event_id exists, then just update otherwise create an entry
    IF entry_exist > 0 THEN
            UPDATE social_event
            SET event_type_id = evcat1, event_nature_id = evcat2, event_time = dateTime1, content = content1
            WHERE social_event_id = event_id;
        ELSE
            INSERT INTO social_event (social_event_id, event_type_id, event_nature_id, event_time, content)
            VALUES (event_id, evcat1, evcat2, dateTime1, content1);
    END IF;
END //
DELIMITER ;

-- Code to update or insert data into device_event_log table
DELIMITER //
CREATE PROCEDURE UpsertDeviceLog(IN event_id INT, IN evcat1 INT, IN dateTime1 DATETIME)
BEGIN
    DECLARE entry_exist INT;

    --check if the entry exists
    SELECT COUNT(*)
    INTO entry_exist
    FROM device_event_log
    WHERE device_event_id = event_id;

    -- if event_id exists, then just update otherwise create an entry
    IF entry_exist > 0 THEN
            UPDATE device_event_log
            SET event_type_id = evcat1, event_time = dateTime1
            WHERE device_event_id = event_id;
        ELSE
            INSERT INTO device_event_log (device_event_id, event_type_id, event_time)
            VALUES (event_id, evcat1, dateTime1);
    END IF;
END //
DELIMITER ;


-- Code to update or insert data into social_action table
DELIMITER //
CREATE PROCEDURE UpsertActions(IN event_id INT, IN evcat1 INT, IN dateTime1 DATETIME, IN content1 VARCHAR(400))
BEGIN
    DECLARE entry_exist INT;

    --check if the entry exists
    SELECT COUNT(*)
    INTO entry_exist
    FROM social_action
    WHERE social_action_id = event_id;

    -- if event_id exists, then just update otherwise create an entry
    IF entry_exist > 0 THEN
            UPDATE social_action
            SET event_type_id = evcat1, event_time = dateTime1, content = content1
            WHERE social_action_id = event_id;
        ELSE
            INSERT INTO social_action (social_action_id, event_type_id, event_time, content)
            VALUES (event_id, evcat1, dateTime1, content1);
    END IF;
END //
DELIMITER ;

---------------------------------------PROCESS_HASHTAGS-------------------------------------------------------
DELIMITER //
CREATE PROCEDURE process_hashtag()
BEGIN

    DECLARE tag_hold VARCHAR(400);
    DECLARE tag1 VARCHAR(45);

    DECLARE data_feed_max INT;
    DECLARE index_val INT DEFAULT 1;
    DECLARE event_id_hold INT;
    DECLARE finished INTEGER DEFAULT 0;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1;

    SELECT MAX(data_feed_id) INTO data_feed_max FROM SM_data_feed;

    WHILE index_val =< data_feed_max DO
        -- store hashtags
        SELECT event_id, hashtags INTO event_id_hold, tag_hold
        FROM SM_data_feed WHERE data_feed_id = index_val;

        DECLARE idx INT DEFAULT 1;
        -- this will return the number of delimiters in the string, we can assume  the delimiter is just a single comma for simplicity
        DECLARE max_idx INT DEFAULT 1 + (LENGTH(tag_hold) - LENGTH(REPLACE(tag_hold, ',', '')))

        WHILE idx <= max_idx DO
            -- pull the last hashtag from the string & update the string
            SET tag1 = TRIM(SUBSTRING_INDEX(tag_hold, ',', -1));
            SET tag_hold = SUBSTRING_INDEX(tag_hold, ',', (max_idx-idx))
            -- since max number is always constant and we're updating to pull a new string witout
            -- the last addition, it's gonna take the left side string of tag_hold

            -- the following call will create a new entry in the link table event_tag
            CALL UpsertHashtags(event_id, tag1);

            SET idx = idx + 1;
        END WHILE;

        SET index_val = index_val + 1;
    END WHILE;


END //
DELIMITER;




DELIMITER //
CREATE PROCEDURE UpsertHashtags(IN event_id INT, IN tag1 VARCHAR(45))

    DECLARE hashtag_id1 INT;
    DECLARE entry_exist INT;

    -- see if there is an existing hashtag
    SELECT COUNT(*) INTO entry_exist
    FROM hashtags WHERE hashtag_name = tag1

    IF entry_exist > 0 THEN
        -- get the id of the hashtag matching
        SELECT hashtag_id INTO hashtag_id1
        WHERE hashtag_name = tag1;
    ELSE --if hashtag doesn't exist yet, then create a new entry
        INSERT INTO hashtags(hashtag_name)
        VALUES (tag1)
        -- take the last autoincrament id into hashtag_id1;
        SELECT LAST_INSERT_ID() INTO hashtag_id1;
    END IF;

    SELECT COUNT(*) INTO entry_exist
    FROM event_tag WHERE social_event_id = event_id AND hashtag_id = hashtag_id1;

    -- do nothing if the event_tag link table entry already exists, but mostly it doesn't existed yet
    IF entry_exist = 0 THEN
        INSERT INTO event_tag(social_event_id, hashtag_id)
        VALUES (event_id, hashtag_id1)
    END IF;


END //
DELIMITER ;

---------------------------------------PROCESS_IP_ADDRESS-------------------------------------------------------
CREATE PROCEDURE `process_ip_address` ()
BEGIN
    DECLARE v_ip_address VARCHAR(255);
    SELECT ip_address INTO v_ip_address
    FROM SM_data_feed;

    -- If ip_address is null, place default value
    IF v_ip_address IS NULL THEN
        SET v_ip_address = '0.0.0.0'; -- Default IP address value
    END IF;

    -- Remove non-number characters from ip_address
    SET v_ip_address = REPLACE(REGEXP_REPLACE(v_ip_address, '[^0-9]+', ''), '.', '');

    -- Insert new ip_address record into ip_address table
    INSERT INTO ip_address_table (ip_address) VALUES (v_ip_address);
END 

---------------------------------------PROCESS_LOCATION-------------------------------------------------------
CREATE DEFINER=`root`@`localhost` PROCEDURE `process_location`(IN p_FBUID VARCHAR(255))
BEGIN
    DECLARE v_person_id INT;
    DECLARE v_account_id INT;
    DECLARE v_location VARCHAR(255);
	DECLARE v_location_id INT;
    
    SELECT person_id, account_id INTO v_person_id, v_account_id
    FROM social_account
    WHERE FBUID = p_FBUID;
    
	SELECT location INTO v_location
    FROM SM_data_feed
    WHERE SMUID = p_FBUID;
    
	IF v_location IS NOT NULL THEN
	SELECT location_id INTO v_location_id
	FROM address
	WHERE person_id = v_person_id AND location = v_location;

		IF v_location_id IS NULL THEN
			INSERT INTO address (person_id, account_id, location)
			VALUES (v_person_id, v_account_id, v_location);
		END IF;
	END IF;
END

-----------------------------------------ADD_DEVICE-------------------------------------------------------
CREATE DEFINER=`root`@`localhost` PROCEDURE `add_device`(IN p_FBUID VARCHAR(255), IN p_device VARCHAR(255), IN p_ip_address VARCHAR(255))
BEGIN
	DECLARE v_account_id INT;
    DECLARE v_device_id INT;
    CALL processSMUID(p_FBUID, @v_account_id);
    SET v_account_id = @v_account_id;
    
    if p_device IS NOT NULL THEN
		SELECT device_id INTO v_device_id
		FROM device_make
		WHERE make_name = p_device;
			IF v_device_id IS NULL THEN
				INSERT INTO device_make(make_name)
				VALUES (p_device);
				INSERT INTO device_model(model_name, make_id)
				VALUES("UNKNOWN", LAST_INSERT_ID());
				INSERT INTO device(id_address, model_id, account_id)
				VALUES(p_ip_address, LAST_INSERT_ID(), v_account_id);
			END IF;
	END IF;
END
---------------------------------------PROCESS_SMUID-------------------------------------------------------
CREATE DEFINER=`root`@`localhost` PROCEDURE `process_SMUID`(IN p_SMUID VARCHAR(255))
BEGIN
	DECLARE SM_social_account_id INT;
    SELECT social_account_id INTO SM_social_account_id
    FROM social_account
    WHERE SMUID = p_SMUID;
    IF SM_social_account_id IS NULL THEN
		INSERT INTO social_account (SMUID) values (p_SMUID);
		SET SM_social_account_id = last_insert_id();
	-- Else use found social media account to work on in other stored procedures
    END IF;
END